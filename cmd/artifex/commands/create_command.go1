package commands

import (
	"fmt"

	"github.com/cosmopool/artifex/core"
	"github.com/spf13/cobra"
)

var shoulCreateRepository *bool
var shoulCreateUsecase *bool
var shoulCreateDatasource *bool
var shouldCreateAll *bool
var fileName *string

func configCreate() {
	shouldCreateAll = configCmd.Flags().BoolP("create-all", "c", false, "Create all layers")
	shoulCreateRepository = configCmd.Flags().BoolP("r", "", false, "Create 'repository'")
	shoulCreateUsecase = configCmd.Flags().BoolP("u", "", false, "Create 'usecase'")
	shoulCreateDatasource = configCmd.Flags().BoolP("d", "", false, "Create 'datasource'")
	fileName = createCmd.Flags().StringP("name", "n", "", "File name")
	createCmd.MarkFlagRequired("name")
}

var createCmd = &cobra.Command{
	Use:       "create",
	Short:     "Create files in layers",
	ValidArgs: []string{"all", "repository", "usecase", "datasource"},
	Args:      cobra.OnlyValidArgs,
	Long: "Create the interfaces and implementation files with name template" +
		"From configuration. Can create for single or multiple layers.",
	Run: func(cmd *cobra.Command, args []string) {
		createAll(args)
		createRepository(args)
		createUsecase(args)
		createDatasource(args)
	},
}

func createAll(args []string) {}

func createRepository(args []string) {
	if !core.ArgsContainsCommand(args, "repository") || *shoulCreateRepository || *shouldCreateAll {
		return
	}

	config := core.GetConfig()
	// manager := dir.GetFileManager()
	extension, _ := config.GetOption(core.FILE_EXTENSION)

	// IMPLEMENTATION
	dir, _ := config.GetOption(core.REPOSITORY_IMPLEMENTATION_PATH)
	path := core.MakePath(dir)
	// manager.CreateDir(path)
	fileTemplate, _ := config.GetOption(core.REPOSITORY_IMPLEMENTATION)
	filePath := core.MakeFilePath(path, fileTemplate, *fileName, extension)
	// manager.CreateFile(filePath)
	fmt.Println(filePath)

	// INTERFACE
	dir, _ = config.GetOption(core.REPOSITORY_INTERFACE_PATH)
	path = core.MakePath(dir)
	// manager.CreateDir(path)
	// fmt.Println(path)
	fileTemplate, _ = config.GetOption(core.REPOSITORY_INTERFACE)
	filePath = core.MakeFilePath(path, fileTemplate, *fileName, extension)
	// manager.CreateFile(filePath)
	fmt.Println(filePath)
}

func createUsecase(args []string) {
	if !core.ArgsContainsCommand(args, "usecase") || *shoulCreateUsecase || *shouldCreateAll {
		return
	}

	config := core.GetConfig()
	// manager := dir.GetFileManager()
	extension, _ := config.GetOption(core.FILE_EXTENSION)

	// IMPLEMENTATION
	dir, _ := config.GetOption(core.USECASE_IMPLEMENTATION_PATH)
	path := core.MakePath(dir)
	// manager.CreateDir(path)
	fileTemplate, _ := config.GetOption(core.USECASE_IMPLEMENTATION)
	filePath := core.MakeFilePath(path, fileTemplate, *fileName, extension)
	// manager.CreateFile(filePath)
	fmt.Println(filePath)
}

func createDatasource(args []string) {
	if !core.ArgsContainsCommand(args, "datasource") || *shoulCreateDatasource || *shouldCreateAll {
		return
	}
}
